---
- name: Deploy Frontend Application with Docker, Nginx, and SSL
  hosts: baopun-website
  become: yes

  vars:
    frontend_image: "nginx:latest"
    frontend_container_name: "frontend_app"
    frontend_env:
      NODE_ENV: "production"
    frontend_port: 3000
    ssl_cert_dir: "/etc/ssl/myfrontend"
    ssl_cert_src: "files/acm_certificate.pem"      # Exported from ACM
    ssl_cert_dest: "{{ ssl_cert_dir }}/fullchain.pem"
    ssl_key_src: "files/acm_private_key.pem"       # Exported from ACM
    ssl_key_dest: "{{ ssl_cert_dir }}/privkey.pem"
    nginx_conf_src: "templates/nginx.conf.j2"
    nginx_conf_dest: "/etc/nginx/nginx.conf"

  vars_files:
    - vars/secrets.yml
    - vars/env.yml

  tasks:
    - name: Install required system packages
      yum:
        name:
          - ca-certificates
        state: present
        update_cache: yes

    - name: Install Docker
      yum:
        name:
          - docker
        state: present

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Pull frontend container image
      docker_image:
        name: "{{ frontend_image }}"
        source: pull

    - name: Start frontend container
      docker_container:
        name: "{{ frontend_container_name }}"
        image: "{{ frontend_image }}"
        env: "{{ frontend_env }}"
        restart_policy: always
        ports:
          - "{{ frontend_port }}:{{ frontend_port }}"

    - name: Install Nginx
      yum:
        name: nginx
        state: present

    - name: Create SSL certificates directory
      file:
        path: "{{ ssl_cert_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Generate ACM passphrase and save to file
      community.crypto.openssl_random:
        length: 32
        hex: false
        base64: true
        path: "{{ acm_passphrase_file }}"
        mode: '0600'
      when: acm_passphrase_file is defined

    - name: Export ACM certificate (imported certificates only)
      shell: |
        aws acm export-certificate \
          --certificate-arn "{{ aws_acm_certificate_arn }}" \
          --region {{ aws_region }} \
          --passphrase fileb://{{ acm_passphrase_file }} \
          --output json > /tmp/acm_export.json
      args:
        creates: /tmp/acm_export.json
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"

    - name: Parse exported certificate
      set_fact:
        acm_certificate_body: "{{ lookup('file', '/tmp/acm_export.json') | from_json | json_query('Certificate') }}"
        acm_certificate_chain: "{{ lookup('file', '/tmp/acm_export.json') | from_json | json_query('CertificateChain') }}"
        acm_private_key: "{{ lookup('file', '/tmp/acm_export.json') | from_json | json_query('PrivateKey') }}"

    - name: Write certificate file
      copy:
        content: "{{ acm_certificate_body }}"
        dest: "{{ ssl_cert_dest }}"
        mode: '0644'

    - name: Write private key file
      copy:
        content: "{{ acm_private_key }}"
        dest: "{{ ssl_key_dest }}"
        mode: '0600'

    - name: Copy ACM SSL certificate
      copy:
        src: "{{ ssl_cert_src }}"
        dest: "{{ ssl_cert_dest }}"
        owner: root
        group: root
        mode: '0644'

    - name: Copy ACM SSL private key
      copy:
        src: "{{ ssl_key_src }}"
        dest: "{{ ssl_key_dest }}"
        owner: root
        group: root
        mode: '0600'

    - name: Configure Nginx with SSL certificate
      template:
        src: "{{ nginx_conf_src }}"
        dest: "{{ nginx_conf_dest }}"
        mode: '0644'
      notify: Restart Nginx

    - name: Ensure Nginx is running
      service:
        name: nginx
        state: started
        enabled: yes

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
---
- name: Deploy Frontend Application with Docker and Nginx
  hosts: baopun-website
  become: yes

  vars:
    frontend_image: "ghcr.io/baopun/baopun-website:latest"
    frontend_container_name: "baopun-website"
    frontend_env:
      NODE_ENV: "production"
    nginx_conf_src: "templates/"
    nginx_conf_dest: "/etc/nginx/conf.d/"

  vars_files:
    - vars/secrets.yml
    - vars/env.yml

  tasks:
    - name: Install Docker and other dependencies
      dnf:
        name: 
          - docker
          - git
          - nodejs
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Add ec2-user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Start & enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Stop host Nginx (if running)
      service:
        name: nginx
        state: stopped
        enabled: no
      ignore_errors: yes

    - name: Remove host Nginx package
      dnf:
        name: nginx
        state: absent
      ignore_errors: yes

    - name: Install Nginx
      dnf:
        name: nginx
        state: present

    - name: Ensure application directory exists
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Remove any running containers using port 80 and 3000
      shell: |
        docker ps --filter "publish=80" --format "{{'{{'}}.ID{{'}}'}}" | xargs -r docker rm -f
        docker ps --filter "publish=3000" --format "{{'{{'}}.ID{{'}}'}}" | xargs -r docker rm -f
      ignore_errors: yes 

    - name: Prune unused Docker containers, images, networks.
      community.docker.docker_prune:
        containers: true
        images: true
        images_filters:
          dangling: false
        networks: true 
        builder_cache: true

    - name: Copy static nginx.conf
      copy:
        src: ../nginx/nginx.conf           
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'

    - name: Add HTTP Nginx server block
      template:
        src: "{{ nginx_conf_src }}/nginx.conf.j2"     
        dest: "{{ nginx_conf_dest }}/default.conf"   
        mode: '0644'

    # New: add https and ssh config
    - name: Add https Nginx server block
      template: 
        src: "{{ nginx_conf_src }}/nginx_https.conf.j2"
        dest: "{{ nginx_conf_dest }}/nginx_https.conf"
        mode: '0644'

    - name: Log in to GitHub Container Registry
      docker_login:
        registry_url: ghcr.io
        username: "{{ ghcr_username }}"
        password: "{{ ghcr_pat }}"

    - name: Remove everything from app directory before cloning
      ansible.builtin.file:
        path: "{{ app_directory }}"
      ignore_errors: yes
        
    - name: Clone git repo inside app directory
      git:
        repo: "https://{{ git_repo }}"
        dest: "{{ app_directory }}"
      ignore_errors: yes

    - name: Install dependencies from cloned repo's packages
      community.general.npm:
        path: "{{ app_directory }}"

    - name: Pull latest frontend container image
      docker_image:
        name: "{{ frontend_image }}"
        source: pull
        tag: latest
        force_source: yes

    - name: Start frontend container
      docker_container:
        name: "{{ frontend_container_name }}"
        image: "{{ frontend_image }}"
        restart_policy: unless-stopped
        ports:
          - "3000:3000"

    - name: Start and enable Nginx
      service:
        name: nginx
        state: started
        enabled: yes
    
    # New: add task to generate certificate using certbot
    - name: Create SSL certificate for HTTPS
      shell: |
        certbot --nginx \
        --non-interactive \
        --agree-tos \
        --email bao.phungus.26@gmail.com \
        -d {{ domain }} \
        --force-renewal --redirect
      args:
        creates: /etc/letsencrypt/live/{{ domain }}

    # New: give permission to created directory
    - name: Allow permission for newly created SSL certificate directory
      ansible.builtin.file:
        path: /etc/letsencrypt/live/
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"

    

    